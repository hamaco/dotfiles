#compdef php-nabe

_php-nabe() {
  _no_arguments() {
    (( ret )) && _message 'no more arguments'
  }

  typeset -A opt_args
  local context state line ret=1

  _arguments -C \
    '(--clean-source)--clean-source[Before building, remove old source code]' \
    '(--disable-mysqlnd)--disable-mysqlnd[Disable mysqlnd extension]' \
    '(--git)--git[Get code from git repository]' \
    '(--rebuild)--rebuild[Rebuild]' \
    '1: :->cmds' \
    '(1 *): :->args'

  case $state in
    cmds)
      local -a cmds
      cmds=(
        setup help install ls use disable
        ext-install ext-remove ext-ls ext-disable ext-enable
        composer-install
        fpm-start fpm-stop fpm-reload
      )

      _describe -t commands 'php-nabe command' cmds && ret=0
      ;;
    args)
      case $line[1] in
        install)
          __php_nabe_retrieve_update_cache
          _describe "PHP Versions" __php_nabe_php_versions || return 1
          ;;
        use)
          local -a _versions
          _versions=( $(php-nabe ls | grep -v '=>') )

          _describe -t versions "PHP Versions" _versions && ret=0
          ;;
        ext-remove | ext-disable)
          local -a _extensions
          _extensions=( $(php-nabe ext-ls) )

          _describe -t extensions "PHP extensions" _extensions && ret=0
          ;;
        *)
          _no_arguments
          ;;
      esac
      ;;
  esac

  return ret
}

__php_nabe_retrieve_update_cache() {
  if (!(($+__php_nabe_php_versions)) || _cache_invalid 'php-nabe') && ! _retrieve_cache 'php-nabe'; then
    __php_nabe_php_versions=( $(__php_nabe_get_available_versions) )
    _store_cache 'php-nabe' __php_nabe_php_versions
    return 0
  fi

  return 1
}

__php_nabe_get_available_versions() {
  local versions

  versions=( $(curl --silent https://api.github.com/repos/php/php-src/tags | awk '/"name": "php-[0-9].+"/ { print $0 }' | sed -e "s/.*php-\([0-9\.]*\).*/\1/" | uniq) )
  echo $versions
}

_php-nabe "$@"
